package com.fronde.server.services.id;

import com.fronde.server.domain.response.PagedResponse;
import com.fronde.server.services.common.CommonRepository;
import com.fronde.server.utils.CSVExportUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class IdSearchService {

  @Autowired
  protected CSVExportUtils exportUtils;

  @Autowired
  protected CommonRepository commonRepository;

  public PagedResponse<IdSearchDTO> search(IdSearchCriteria criteria) {
    return commonRepository.findIdSearchByCriteria(criteria);
  }

  /**
   * TODO: Copy pasted from original Export functionality, if changed needs to be updated manually
   * as this wasn't generated by the code generator.
   *
   * @param criteria
   * @param response
   */
  public void export(IdSearchCriteria criteria, HttpServletResponse response) {
    List<String> header = Arrays.asList("Bird",
        "Island",
        "Tx Added",
        "Tx Removed",
        "Date",
        "Channel",
        "UHF Id",
        "Frequency",
        "Tune",
        "Expires",
        "Mort Type",
        "Action",
        "Software",
        "Microchip",
        "Band",
        "Leg");
    List<String> props = Arrays.asList("birdName",
        "island",
        "txId",
        "txFromId",
        "dateTime",
        "channel",
        "uhfId",
        "frequency",
        "txFineTune",
        "expiryDate",
        "mortType",
        "action",
        "software",
        "chip",
        "band",
        "leg");
    criteria.setPageSize(exportUtils.getMaxRows());
    criteria.setPageNumber(1);
    PagedResponse<IdSearchDTO> pr = commonRepository.findIdSearchByCriteria(criteria);
    exportUtils.export(response, pr, header, props, "idSearch");
  }

  public void exportTransmitterList(IdSearchCriteria criteria, HttpServletResponse response) {
    List<String> header = Arrays.asList("Bird",
        "Colour",
        "Age Class",
        "Sex",
        "Tx Id",
        "Channel",
        "UHF Id",
        "Frequency",
        "Tune");
    List<String> props = Arrays.asList("birdName",
        "colour",
        "ageClass",
        "sex",
        "txId",
        "channel",
        "uhfId",
        "frequency",
        "txFineTune");
    criteria.setPageSize(exportUtils.getMaxRows());
    criteria.setPageNumber(1);
    PagedResponse<IdSearchDTO> pr = commonRepository.findIdSearchByCriteria(criteria);
    List<Map<String, Object>> list = new ArrayList<>();
    for (IdSearchDTO dto : pr.getResults()) {
      Map<String, Object> map = new HashMap<>();
      map.put("birdName", dto.getBirdName());
      map.put("colour", toColour(dto.getSex(), dto.getAgeClass()));
      map.put("ageClass", dto.getAgeClass());
      map.put("sex", dto.getSex());
      map.put("transmitterGroup", dto.getTransmitterGroup());
      map.put("txId", dto.getTxId());
      map.put("channel", dto.getChannel());
      map.put("uhfId", dto.getUhfId());
      map.put("frequency", dto.getFrequency());
      map.put("txFineTune", dto.getTxFineTune());
      list.add(map);
    }
    exportUtils.export(response, list, header, props, "idSearchTransmitterList");
  }

  private String toColour(String sex, String ageClass) {
    if ("Adult".equals(ageClass)) {
      if (Arrays.asList(new String[]{"Female", "Male"}).contains(sex)) {
        return "Adult " + sex;
      } else {
        return null;
      }
    } else if (Arrays.asList(new String[]{"Juvenile", "Chick"}).contains(ageClass)) {
      return "Juvenile/Chick";
    } else {
      return null;
    }
  }

}
